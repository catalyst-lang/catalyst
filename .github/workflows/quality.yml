on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - poc

name: Code Quality Scan

env:
  LLVM_VER: 15.0.6

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-22.04
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Install dependencies
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${LLVM_VER%%.*}
          echo "LLVM_DIR=/usr/lib/llvm-${LLVM_VER%%.*}" >> $GITHUB_ENV

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Configure
        run: cmake -GNinja -B build -DCMAKE_CXX_COMPILER=clang++-15 -DCMAKE_C_COMPILER=clang-15 -DCMAKE_BUILD_TYPE=Release -DCOVERAGE=true -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build

      - name: Run tests
        run: |
          ./build/toolchain/parser/test-parser
          mv default.profraw parser.profraw
          ./build/toolchain/compiler/test-compiler
          mv default.profraw compiler.profraw
      - name: Merge counters from different runs and convert the result into an llvm-cov-compatible form
        run: |
          llvm-profdata-15 merge -o merged.profdata *.profraw
      - name: Collect the coverage
        run: |
          llvm-cov-15 show --instr-profile merged.profdata build/toolchain/parser/test-parser -object build/toolchain/compiler/test-compiler > coverage.txt
          llvm-cov-15 export --format=lcov -instr-profile merged.profdata build/toolchain/parser/test-parser -object build/toolchain/compiler/test-compiler > coverage.lcov

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.cfamily.llvm-cov.reportPath=coverage.txt
          rm -rf .sonar .scannerwork

      - name: Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          cd ~
          wget https://github.com/codacy/codacy-clang-tidy/releases/download/1.3.5/codacy-clang-tidy-linux-1.3.5
          chmod a+x codacy-clang-tidy-linux-1.3.5
          cd $GITHUB_WORKSPACE

          # 1. Run Clang-Tidy
          /usr/lib/llvm-${LLVM_VER%%.*}/share/clang/run-clang-tidy.py -p ./build | \
          # 2. Convert the Clang-Tidy output to a format that the Codacy API accepts
          ~/codacy-clang-tidy-linux-1.3.5 | \
          # 3. Send the results to Codacy
          curl -XPOST -L -H "project-token: $CODACY_PROJECT_TOKEN" \
              -H "Content-type: application/json" -d @- \
              "https://api.codacy.com/2.0/commit/$GITHUB_SHA/issuesRemoteResults"

          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l C -r coverage.lcov
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l CPP -r coverage.lcov
          bash <(curl -Ls https://coverage.codacy.com/get.sh) final


